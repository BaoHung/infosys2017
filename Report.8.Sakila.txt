use sakila;

-- List names of all the languages in the database (sorted alphabetically)?
SELECT 
    `name`
FROM
    `language`
ORDER BY name;

+----------+
| name     |
+----------+
| English  |
| French   |
| German   |
| Italian  |
| Japanese |
| Mandarin |
+----------+
6 rows in set (0.00 sec)

-- List full names of actors with "GER" in their last name, ordered by their first name
SELECT 
    CONCAT(first_name, ' ', last_name) AS `Full name`
FROM
    actor
WHERE
    UCASE(last_name) LIKE '%GER%'
ORDER BY first_name;

+-------------------+
| Full name         |
+-------------------+
| CAMERON ZELLWEGER |
| JULIA ZELLWEGER   |
| MICHAEL BOLGER    |
| MINNIE ZELLWEGER  |
| VAL BOLGER        |
| VIVIEN BASINGER   |
+-------------------+
6 rows in set (0.00 sec)

-- Find all the addresses where postal code starts with "57", and return addresses sorted.
SELECT 
    address
FROM
    address
WHERE
    postal_code LIKE '57%'
ORDER BY address;

+-----------------------------------+
| address                           |
+-----------------------------------+
| 1029 Dzerzinsk Manor              |
| 1061 Ede Avenue                   |
| 1287 Xiangfan Boulevard           |
| 1309 Weifang Street               |
| 1515 Korla Way                    |
| 1697 Kowloon and New Kowloon Loop |
| 231 Kaliningrad Place             |
| 390 Wroclaw Way                   |
| 431 Szkesfehrvr Avenue            |
| 687 Alessandria Parkway           |
| 869 Shikarpur Way                 |
+-----------------------------------+
11 rows in set (0.00 sec)

-- How many films involve a "DWARF" in their titles?
SELECT 
    COUNT(*) as `Number of films involving "DWARF"`
FROM
    film
WHERE
    UCASE(title) LIKE '%DWARF%';

+-----------------------------------+
| Number of films involving "DWARF" |
+-----------------------------------+
|                                 2 |
+-----------------------------------+
1 row in set (0.00 sec)

-- Find full names of actors who played in a film involving ’WAR’ in title and longer than 2.5 hours, along with the title, run length and release year of the movie, sorted by the actors’ last names.
SELECT
    CONCAT(first_name, ' ', last_name) AS `Full name`,
    title,
    length,
    release_year
FROM
    actor
        JOIN
    film_actor ON actor.actor_id = film_actor.actor_id
        JOIN
    film ON film_actor.film_id = film.film_id
WHERE
    UCASE(title) LIKE '%WAR%'
        AND length > (2.5 * 60)
ORDER BY last_name;

+-------------------+---------------------+--------+--------------+
| Full name         | title               | length | release_year |
+-------------------+---------------------+--------+--------------+
| ANGELINA ASTAIRE  | WARDROBE PHANTOM    |    178 |         2006 |
| KARL BERRY        | LEATHERNECKS DWARFS |    153 |         2006 |
| SUSAN DAVIS       | LEATHERNECKS DWARFS |    153 |         2006 |
| RIVER DEAN        | WARDROBE PHANTOM    |    178 |         2006 |
| SPENCER DEPP      | LEATHERNECKS DWARFS |    153 |         2006 |
| BOB FAWCETT       | LEATHERNECKS DWARFS |    153 |         2006 |
| GREGORY GOODING   | WARDROBE PHANTOM    |    178 |         2006 |
| ADAM GRANT        | GLADIATOR WESTWARD  |    173 |         2006 |
| KIRK JOVOVICH     | WARDROBE PHANTOM    |    178 |         2006 |
| KIRK JOVOVICH     | GLADIATOR WESTWARD  |    173 |         2006 |
| JULIA MCQUEEN     | GLADIATOR WESTWARD  |    173 |         2006 |
| PENELOPE MONROE   | LEATHERNECKS DWARFS |    153 |         2006 |
| WARREN NOLTE      | WARDROBE PHANTOM    |    178 |         2006 |
| JAYNE SILVERSTONE | GLADIATOR WESTWARD  |    173 |         2006 |
| IAN TANDY         | LEATHERNECKS DWARFS |    153 |         2006 |
| IAN TANDY         | GLADIATOR WESTWARD  |    173 |         2006 |
| THORA TEMPLE      | WARDROBE PHANTOM    |    178 |         2006 |
| WALTER TORN       | WARDROBE PHANTOM    |    178 |         2006 |
| NICK WAHLBERG     | WARDROBE PHANTOM    |    178 |         2006 |
| UMA WOOD          | LEATHERNECKS DWARFS |    153 |         2006 |
| CAMERON ZELLWEGER | GLADIATOR WESTWARD  |    173 |         2006 |
+-------------------+---------------------+--------+--------------+
21 rows in set (0.00 sec)

-- Find all the film categories in which there are between 55 and 65 films. Return the names of these categories and the number of films per category, sorted by the number of films descending.
SELECT 
    category.name, COUNT(film.film_id) AS number_of_film
FROM
    film
        JOIN
    film_category ON film.film_id = film_category.film_id
        JOIN
    category ON film_category.category_id = category.category_id
GROUP BY category.category_id
HAVING number_of_film BETWEEN 55 AND 65
ORDER BY number_of_film DESC;

+----------+----------------+
| name     | number_of_film |
+----------+----------------+
| Action   |             64 |
| New      |             63 |
| Drama    |             62 |
| Games    |             61 |
| Sci-Fi   |             61 |
| Children |             60 |
| Comedy   |             58 |
| Classics |             57 |
| Travel   |             57 |
| Horror   |             56 |
+----------+----------------+
10 rows in set (0.00 sec)

-- In how many film categories is the average difference between the film replacement cost and the rental rate larger than 17?
SELECT 
    COUNT(*) AS `Number of films`
FROM
    (SELECT 
        category_id
    FROM
        film
    JOIN film_category ON film.film_id = film_category.film_id
    GROUP BY category_id
    HAVING ABS((AVG(replacement_cost) - AVG(rental_rate))) > 17) AS t;
 
+-----------------+
| Number of films |
+-----------------+
|               8 |
+-----------------+
1 row in set (0.00 sec)

-- Find the address district(s) name(s) such that the minimal postal code in the district(s) is maximal over all the districts.
-- Make sure your query ignores empty postal codes and district names.
SELECT 
    district, postal_code
FROM
    address
WHERE
    postal_code = (
		SELECT 
            MAX(min_postal_code)
        FROM
            (SELECT 
                MIN(postal_code) AS min_postal_code
            FROM
                address
            WHERE
                district IS NOT NULL
                    AND postal_code IS NOT NULL
                    AND district != ''
                    AND postal_code != ''
            GROUP BY district) AS t);

+----------+-------------+
| district | postal_code |
+----------+-------------+
| Crdoba   | 99865       |
+----------+-------------+
1 row in set (0.00 sec)
 
-- Find the names (first and last) of all the actors and customers whose first name is the same as the first name of the actor with ID 101 (exclude the actor with ID 101)

SELECT 
	CONCAT(first_name, ' ', last_name) AS `Full name`
FROM
    (SELECT first_name, last_name FROM customer 
	UNION 
    SELECT first_name, last_name FROM actor WHERE actor_id != '101') AS actor_and_customer
WHERE
    first_name = (
		SELECT 
            first_name
        FROM
            actor
        WHERE
            actor_id = '101');

+--------------+
| Full name    |
+--------------+
| SUSAN DAVIS  |
| SUSAN WILSON |
+--------------+
2 rows in set (0.01 sec)